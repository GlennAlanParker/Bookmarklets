// ImageData.js
(function() {
    const LSK = "imgDataOverlay_v1";

    if (window._imgData?.cleanup) window._imgData.cleanup();

    const d = document;
    window._imgData = {
        badges: [],
        badgesVisible: true,
        cleanup() {
            try {
                this.badges.forEach(b => b.box?.remove());
                this.badges = [];
                this.scrollHandler && removeEventListener("scroll", this.scrollHandler);
                this.resizeHandler && removeEventListener("resize", this.resizeHandler);
                this.interval && clearInterval(this.interval);
                this.overlay && this.overlay.remove();
            } catch (e) {
                console.warn("Cleanup error", e);
            }
        }
    };

    const imgs = [...d.images];
    const items = [];
    const badges = window._imgData.badges;
    let n = 1;
    const badgeSize = 26, vGap = 6, margin = 6;

    const updateBadgePositions = () => {
        const placed = [];
        badges.forEach(b => {
            try {
                const r = b.img.getBoundingClientRect();
                const docX = r.left + scrollX, docY = r.top + scrollY;
                const bw = badgeSize, bh = badgeSize;
                let x = Math.max(margin, Math.min(d.documentElement.scrollWidth - bw - margin, Math.round(docX - 8)));
                let y = Math.max(margin, Math.min(d.documentElement.scrollHeight - bh - margin, Math.round(docY - 8)));
                placed.forEach(p => {
                    if (Math.abs(p.x - x) < bw + 8 && !((y + bh + vGap < p.y) || y > p.y + p.bh + vGap)) {
                        y = p.y + p.bh + vGap;
                    }
                });
                Object.assign(b.box.style, { left: x + "px", top: y + "px", display: window._imgData.badgesVisible ? "flex" : "none", alignItems: "center", justifyContent: "center", opacity: "1" });
                placed.push({ x, y, bw, bh });
            } catch { }
        });
    };

    // Collect image info
    imgs.forEach(e => {
        try {
            const s = (e.src || "").trim();
            const sl = s.toLowerCase(), alt = (e.alt || "").toLowerCase();
            if (!s || sl.includes("qrcode") || alt.includes("qr") || sl.startsWith("data:")) return;

            const name = (s.split("/").pop().split("?")[0]) || "";
            if (!name) return;

            e.id = `imgData_${n}`;
            items.push({
                name,
                dim: `${e.naturalWidth}Ã—${e.naturalHeight} actual, ${e.width}Ã—${e.height} rendered`,
                size: "Fetching...",
                alt: e.alt || "None",
                caption: (e.closest("figure")?.querySelector("figcaption")?.textContent || "").trim().replace(/\(.*?\)/g, "").replace(/Open image in slideshow/gi, "").trim() || "None",
                url: e.src,
                anchorId: e.id
            });

            const a = d.createElement("a");
            a.textContent = n;
            a.href = e.src;
            a.target = "_blank";
            a.rel = "noopener noreferrer";
            Object.assign(a.style, { position: "absolute", top: "0", left: "0", display: "flex", alignItems: "center", justifyContent: "center", background: "#FFA500", color: "#000", fontWeight: "700", fontSize: "14px", border: "2px solid #000", width: badgeSize + "px", height: badgeSize + "px", lineHeight: badgeSize + "px", textAlign: "center", pointerEvents: "auto", userSelect: "none", zIndex: 2147483648, textDecoration: "none", borderRadius: "50%", boxShadow: "0 1px 3px rgba(0,0,0,0.3)", cursor: "pointer" });
            d.body.appendChild(a);
            badges.push({ img: e, box: a });
            n++;
        } catch { }
    });

    updateBadgePositions();
    setTimeout(updateBadgePositions, 80);

    window._imgData.scrollHandler = () => updateBadgePositions();
    addEventListener("scroll", window._imgData.scrollHandler);
    window._imgData.resizeHandler = () => updateBadgePositions();
    addEventListener("resize", window._imgData.resizeHandler);
    window._imgData.interval = setInterval(updateBadgePositions, 300);

    // Overlay container
    const o = d.createElement("div");
    o.id = "img-data-overlay";
    window._imgData.overlay = o;
    Object.assign(o.style, {
        position: "fixed",
        right: "0px",
        top: "10px",
        width: "520px",
        height: "240px",
        maxHeight: "90vh",
        display: "flex",
        flexDirection: "column",
        background: "#f8f9fa",
        color: "#1a1a1a",
        font: "14px 'Segoe UI', Tahoma, Verdana, sans-serif",
        zIndex: 2147483647,
        whiteSpace: "pre-wrap",
        border: "1px solid #ccc",
        borderRadius: "10px",
        boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
        boxSizing: "border-box",
        overflow: "hidden"
    });

    const headerH = 64, footerH = 28;

    const makeGrip = () => {
        const g = d.createElement("div");
        Object.assign(g.style, { width: "42px", height: "18px", borderRadius: "4px", marginRight: "8px", background: "repeating-linear-gradient(90deg,#888 0 4px,transparent 4 8px)" });
        return g;
    };

    const mkbar = pos => {
        const b = d.createElement("div");
        Object.assign(b.style, { height: (pos === "top" ? headerH : footerH) + "px", display: "flex", alignItems: "center", justifyContent: pos === "top" ? "space-between" : "flex-end", padding: "6px 10px", background: "#34495e", color: "#fff", fontWeight: 700, cursor: "grab", userSelect: "none", borderBottom: pos === "top" ? "1px solid rgba(0,0,0,0.08)" : "none", borderTop: pos === "bottom" ? "1px solid rgba(0,0,0,0.08)" : "none", flexShrink: 0 });

        if (pos === "top") {
            const left = d.createElement("div");
            left.style.display = "flex";
            left.style.alignItems = "center";
            left.appendChild(makeGrip());

            const title = d.createElement("h1");
            title.textContent = "IMAGE DATA";
            Object.assign(title.style, { margin: "0", fontSize: "16px", fontWeight: "700", color: "#fff", display: "flex", alignItems: "center" });
            left.appendChild(title);
            b.appendChild(left);

            const btns = d.createElement("div");
            btns.style.display = "flex";
            btns.style.alignItems = "center";
            btns.style.gap = "8px";
            btns.style.height = "100%";

            const toggleGroup = d.createElement("div");
            toggleGroup.style.display = "flex";
            toggleGroup.style.alignItems = "center";
            toggleGroup.style.background = "#95a5a6";
            toggleGroup.style.borderRadius = "6px";
            toggleGroup.style.padding = "4px 6px";
            toggleGroup.style.cursor = "pointer";
            toggleGroup.style.userSelect = "none";
            toggleGroup.style.marginTop = "2px";

            const label = d.createElement("span");
            label.textContent = "Toggle Badges";
            label.style.fontSize = "12px";
            label.style.marginRight = "6px";
            label.setAttribute("data-drag-ignore", "1");
            label.onpointerdown = e => e.stopPropagation();

            const toggleBtn = d.createElement("button");
            toggleBtn.textContent = "ðŸ”¢";
            toggleBtn.title = "Toggle Number Badges";
            toggleBtn.style.border = "none";
            toggleBtn.style.background = "transparent";
            toggleBtn.style.fontSize = "14px";
            toggleBtn.style.cursor = "pointer";
            toggleBtn.setAttribute("data-drag-ignore", "1");
            toggleBtn.onpointerdown = e => e.stopPropagation();

            toggleGroup.onclick = e => {
                e.stopPropagation();
                window._imgData.badgesVisible = !window._imgData.badgesVisible;
                badges.forEach(bb => bb.box.style.display = window._imgData.badgesVisible ? "flex" : "none");
            };

            toggleGroup.append(label, toggleBtn);
            btns.append(toggleGroup);

            const x = d.createElement("div");
            x.textContent = "Ã—";
            Object.assign(x.style, { cursor: "pointer", fontSize: "20px", width: "32px", height: "32px", background: "#e74c3c", color: "#fff", display: "flex", alignItems: "center", justifyContent: "center", boxShadow: "0 1px 3px rgba(0,0,0,0.3)", borderRadius: "50%", marginTop: "2px" });
            x.title = "Close";
            x.setAttribute("data-drag-ignore", "1");
            x.onclick = e => { e.stopPropagation(); o.remove(); localStorage.removeItem(LSK); window._imgData.cleanup(); };
            btns.append(x);

            b.appendChild(btns);
        }

        b.setAttribute("data-drag-handle", "1");
        return b;
    };

    const txt = d.createElement("div");
    Object.assign(txt.style, { padding: "10px", overflow: "auto", flex: "1", background: "#ffffff", position: "relative" });

    const backTop = d.createElement("div");
    backTop.textContent = "â†‘";
    Object.assign(backTop.style, { position: "absolute", bottom: "10px", right: "10px", width: "32px", height: "32px", borderRadius: "50%", background: "#3498db", color: "#fff", display: "none", alignItems: "center", justifyContent: "center", cursor: "pointer", boxShadow: "0 1px 3px rgba(0,0,0,0.3)", zIndex: 2147483648, userSelect: "none", fontSize: "18px", textAlign: "center", lineHeight: "32px" });
    backTop.title = "Back to Top";
    backTop.onclick = () => { txt.scrollTo({ top: 0, behavior: "smooth" }); };
    txt.addEventListener("scroll", () => { backTop.style.display = txt.scrollTop > 0 ? "flex" : "none"; });

    o.append(mkbar("top"), txt, mkbar("bottom"), backTop);
    d.body.appendChild(o);

    const autosize = () => {
        try {
            const contentH = txt.scrollHeight, desired = headerH + contentH + footerH, maxH = Math.floor(.9 * innerHeight), minH = 140;
            const h = Math.max(minH, Math.min(desired, maxH));
            o.style.height = h + "px";
        } catch { }
    };

    const update = () => {
        txt.innerHTML = items.length ? items.map((it, i) => 
            `<div style="display:flex;padding:8px 0;border-bottom:1px solid #eee;align-items:flex-start">
                <div style="flex:0 0 ${badgeSize}px;display:flex;align-items:center;justify-content:center;margin-right:8px;">
                    <a href="#${it.anchorId}" onclick="document.getElementById('${it.anchorId}').scrollIntoView({behavior:'smooth',block:'center'});return false;" style="display:flex;align-items:center;justify-content:center;background:#FFA500;color:#000;font-weight:700;font-size:14px;border:2px solid #000;width:${badgeSize}px;height:${badgeSize}px;line-height:${badgeSize}px;text-align:center;user-select:none;text-decoration:none;border-radius:50%;box-shadow:0 1px 3px rgba(0,0,0,0.3);cursor:pointer">${i+1}</a>
                </div>
                <div style="flex:1">
                    <div><strong>Name:</strong> ${it.name}</div>
                    <div><strong>Dimensions:</strong> ${it.dim}</div>
                    <div><strong>Size:</strong> ${it.size}</div>
                    <div><strong>Alt:</strong> ${it.alt}</div>
                    <div><strong>Caption:</strong> ${it.caption}</div>
                    <div><strong>URL:</strong> <a href="${it.url}" target="_blank" rel="noopener noreferrer">${it.url}</a></div>
                </div>
            </div>`
        ).join("") : "No images found.";
        autosize();
    };
    update();

    items.forEach(it => {
        fetch(it.url, { method: "HEAD" })
            .then(r => { const cl = r.headers.get("content-length"); it.size = cl ? (+cl / 1024).toFixed(1) + " KB" : "Unknown"; update(); })
            .catch(() => { it.size = "Error"; update(); });
    });
})();
